
V50 test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000002fa  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fa  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800120  00800120  000003ce  2**0
                  ALLOC
  3 .eeprom       00000037  00810000  00810000  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000405  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000d0  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000732  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000388  00000000  00000000  00000c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000595  00000000  00000000  00001002  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000208  00000000  00000000  00001598  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000431  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000036a  00000000  00000000  00001bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a0  00000000  00000000  00001f3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_1>
   8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_17>
  48:	0c 94 0c 01 	jmp	0x218	; 0x218 <__vector_18>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__vector_19>
  50:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2a 01 	call	0x254	; 0x254 <main>
  9e:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_default>

000000a6 <__vector_default>:
volatile unsigned char command_value = 0;
volatile unsigned char command_in_read = 0;

//przerwanie defaultowe na wypadek pozostawienia 
//niebos³u¿onych przerwañ, aby siê procek nie resetowa³
ISR(__vector_default){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1

}
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <__vector_1>:

//zewnetrzne przerwanie INT0
ISR(INT0_vect){
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
	//flaga bêdzie zdjête w przerwaniu SPI kiedy 
	//command_response_count zejdzie do 0
	if(command_in_read == 0){
  ca:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
  ce:	81 11       	cpse	r24, r1
  d0:	19 c0       	rjmp	.+50     	; 0x104 <__vector_1+0x4a>
		command_value = ALL_COMMANDS[command_counter].PCommand;
  d2:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <command_counter>
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	ee 0f       	add	r30, r30
  da:	ff 1f       	adc	r31, r31
  dc:	ef 5f       	subi	r30, 0xFF	; 255
  de:	fe 4f       	sbci	r31, 0xFE	; 254
  e0:	80 81       	ld	r24, Z
  e2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <command_value>
		command_response_count = ALL_COMMANDS[command_counter].SLength + 1;
  e6:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <command_counter>
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ef 5f       	subi	r30, 0xFF	; 255
  f2:	fe 4f       	sbci	r31, 0xFE	; 254
  f4:	81 81       	ldd	r24, Z+1	; 0x01
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <command_response_count>
		command_in_read = 1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 102:	09 c0       	rjmp	.+18     	; 0x116 <__vector_1+0x5c>
	}
	else{
		SETBIT(PORTB, SPI_MISO_PIN);
 104:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	85 e3       	ldi	r24, 0x35	; 53
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <__vector_1+0x4e>
 10c:	00 00       	nop
		_delay_us(10);
		CLEARBIT(PORTB, SPI_MISO_PIN);
 10e:	2c 98       	cbi	0x05, 4	; 5
		command_value = CMD_SLAVE_ACK;
 110:	8b ed       	ldi	r24, 0xDB	; 219
 112:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <command_value>
	}

	SPDR = command_value;
 116:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <command_value>
 11a:	8e bd       	out	0x2e, r24	; 46
 11c:	85 e9       	ldi	r24, 0x95	; 149
 11e:	8a 95       	dec	r24
 120:	f1 f7       	brne	.-4      	; 0x11e <__vector_1+0x64>
 122:	00 00       	nop

	_delay_us(28);

	SPI_ENABLE;
 124:	8c b5       	in	r24, 0x2c	; 44
 126:	80 64       	ori	r24, 0x40	; 64
 128:	8c bd       	out	0x2c, r24	; 44

	SPI_INT_ENABLE;
 12a:	8c b5       	in	r24, 0x2c	; 44
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8c bd       	out	0x2c, r24	; 44

	MTS_LOW;
 130:	29 98       	cbi	0x05, 1	; 5
}
 132:	ff 91       	pop	r31
 134:	ef 91       	pop	r30
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <__vector_2>:

//zewnetrzne przerwanie INT1, tu nie uzywane
//ale na wszelki wypadek wektor zadeklarowany
ISR(INT1_vect){
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1

}
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <__vector_17>:

//przerwanie zakoñczenia transmiski SPI
ISR(SPI_STC_vect){
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	2f 93       	push	r18
 162:	3f 93       	push	r19
 164:	4f 93       	push	r20
 166:	5f 93       	push	r21
 168:	6f 93       	push	r22
 16a:	7f 93       	push	r23
 16c:	8f 93       	push	r24
 16e:	9f 93       	push	r25
 170:	af 93       	push	r26
 172:	bf 93       	push	r27
 174:	ef 93       	push	r30
 176:	ff 93       	push	r31
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	1f 92       	push	r1
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char tmp = SPDR;
 182:	8e b5       	in	r24, 0x2e	; 46
 184:	89 83       	std	Y+1, r24	; 0x01

	SPI_INT_DISABLE;
 186:	8c b5       	in	r24, 0x2c	; 44
 188:	8f 77       	andi	r24, 0x7F	; 127
 18a:	8c bd       	out	0x2c, r24	; 44
 18c:	85 e8       	ldi	r24, 0x85	; 133
 18e:	8a 95       	dec	r24
 190:	f1 f7       	brne	.-4      	; 0x18e <__vector_17+0x38>
 192:	00 00       	nop

	_delay_us(25);

	
	SPI_DISABLE;
 194:	8c b5       	in	r24, 0x2c	; 44
 196:	8c bd       	out	0x2c, r24	; 44

	if(command_in_read == 1){
 198:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	21 f5       	brne	.+72     	; 0x1e8 <__vector_17+0x92>
		if(command_response_count > 0)
 1a0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <command_response_count>
 1a4:	88 23       	and	r24, r24
 1a6:	29 f0       	breq	.+10     	; 0x1b2 <__vector_17+0x5c>
			command_response_count--;
 1a8:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <command_response_count>
 1ac:	81 50       	subi	r24, 0x01	; 1
 1ae:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <command_response_count>
		if(command_response_count <= 0){
 1b2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <command_response_count>
 1b6:	81 11       	cpse	r24, r1
 1b8:	16 c0       	rjmp	.+44     	; 0x1e6 <__vector_17+0x90>
			command_in_read = 0;
 1ba:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
			command_counter++;
 1be:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <command_counter>
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <command_counter>
			if(command_counter >= command_count){
 1c8:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <command_counter>
 1cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1d0:	98 17       	cp	r25, r24
 1d2:	50 f0       	brcs	.+20     	; 0x1e8 <__vector_17+0x92>
				MTS_HIGH;
 1d4:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	8f e9       	ldi	r24, 0x9F	; 159
 1d8:	9f e0       	ldi	r25, 0x0F	; 15
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <__vector_17+0x84>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <__vector_17+0x8a>
 1e0:	00 00       	nop
				_delay_ms(1);
				MTS_LOW;
 1e2:	29 98       	cbi	0x05, 1	; 5
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <__vector_17+0x92>
			}
		}
		else{
			MTS_HIGH;
 1e6:	29 9a       	sbi	0x05, 1	; 5
		}
	}
	USART_SendByte(command_response_count);
 1e8:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <command_response_count>
 1ec:	0e 94 64 01 	call	0x2c8	; 0x2c8 <USART_SendByte>
}
 1f0:	0f 90       	pop	r0
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <__vector_18>:

//przerwanie odbioru bajtu na USART
ISR(USART_RX_vect){
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1

}
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <__vector_19>:
//przerwanie gotowoci USART ?
ISR(USART_UDRE_vect){
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1

}
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <__vector_20>:
//przerwanie wys³ania bajtu przez USART
ISR(USART_TX_vect){
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1

}
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <main>:

int main(void)
{
	DDRB = 0x00;
 254:	14 b8       	out	0x04, r1	; 4
	DDRC = 0x00;
 256:	17 b8       	out	0x07, r1	; 7
	DDRD = 0x00;
 258:	1a b8       	out	0x0a, r1	; 10

	PORTB = 0x00;
 25a:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
 25c:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00;
 25e:	1b b8       	out	0x0b, r1	; 11
		D2 - STM
		D7 - LED
	*/

	//C0 i C1 jako wyjcia
	DDRC = (1<<ACC_ON)|(1<<RESET); 
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	87 b9       	out	0x07, r24	; 7
	//B1 out, linia MTS
	DDRB = (1<<MTS);
 264:	d2 e0       	ldi	r29, 0x02	; 2
 266:	d4 b9       	out	0x04, r29	; 4
	//D7 out, testowy LED
	DDRD = (1<<PIND7);
 268:	80 e8       	ldi	r24, 0x80	; 128
 26a:	8a b9       	out	0x0a, r24	; 10
	//MTS pull up
	MTS_LOW;
 26c:	29 98       	cbi	0x05, 1	; 5
	 
	///TODO: SPRAWDZIC POLACZENIE KABLI!!!!!
	//CD_RESET - pull-up, ACCON - pull-down
	PORTC = (0<<ACC_ON)|(1<<RESET);
 26e:	c1 e0       	ldi	r28, 0x01	; 1
 270:	c8 b9       	out	0x08, r28	; 8

	//Inicjalizacja SPI jako slave
	SPI_InitSlave();
 272:	0e 94 54 01 	call	0x2a8	; 0x2a8 <SPI_InitSlave>

	//Inicjalizacja UART, konfiguracja w USART.h
	USART_Init();
 276:	0e 94 58 01 	call	0x2b0	; 0x2b0 <USART_Init>

	//Monit ¿e uk³ad ruszy³
	USART_SendStr("INIT");
 27a:	8b e1       	ldi	r24, 0x1B	; 27
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <USART_SendStr>

	//D2 jako wejcie, to jest linia STM
	SET_PINPORT_AS_IN(DDRD, STM);
 282:	52 98       	cbi	0x0a, 2	; 10
	//Pullup
	SETBIT(PORTD, STM); 
 284:	5a 9a       	sbi	0x0b, 2	; 11
	//przerwanie inicjuje zbocze opadaj¹ce
	EICRA = (1<<ISC01);
 286:	d0 93 69 00 	sts	0x0069, r29	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>

	//wy³¹czenie przerwania na SPI
	SPI_INT_DISABLE;
 28a:	8c b5       	in	r24, 0x2c	; 44
 28c:	8f 77       	andi	r24, 0x7F	; 127
 28e:	8c bd       	out	0x2c, r24	; 44
	//w³¹czenie przerwania na INT0
	INT0_ENABLE;
 290:	cd bb       	out	0x1d, r28	; 29
 292:	2f ef       	ldi	r18, 0xFF	; 255
 294:	8b e4       	ldi	r24, 0x4B	; 75
 296:	9d e1       	ldi	r25, 0x1D	; 29
 298:	21 50       	subi	r18, 0x01	; 1
 29a:	80 40       	sbci	r24, 0x00	; 0
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <main+0x44>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <main+0x4e>
 2a2:	00 00       	nop

	_delay_ms(600);

	//global interrupts on
	sei();
 2a4:	78 94       	sei
    while (1) 
    {
		
		

    }
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <main+0x52>

000002a8 <SPI_InitSlave>:
	//The MOSI, SCK pins are as per ATMega8
	SPCR=(1<<SPIE)|(1<<SPE)|(SPI_BYTE_ORDER<<DORD)|(1<<MSTR)|(1<<SPR1)|(0<<SPR0)|(1<<CPOL)|(1<<CPHA);
}

void SPI_InitSlave(void){
	SET_PINPORT_AS_OUT(DDRB, PINB4); //MISO as OUTPUT
 2a8:	24 9a       	sbi	0x04, 4	; 4
	SPCR = (1<<SPIE)|(0<<MSTR)|(SPI_BYTE_ORDER<<DORD)|(1<<CPOL)|(1<<CPHA);   
 2aa:	8c ea       	ldi	r24, 0xAC	; 172
 2ac:	8c bd       	out	0x2c, r24	; 44
 2ae:	08 95       	ret

000002b0 <USART_Init>:
extern volatile unsigned char UART_buffer[16];
//extern volatile uint8_t UART_buffer_position = 0; 

void USART_Init(void){
  /*Set baud rate */
  UBRR0H = (BAUD_PRESCALE >> 8);
 2b0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  UBRR0L = BAUD_PRESCALE;
 2b4:	83 e3       	ldi	r24, 0x33	; 51
 2b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

  /*Enable receiver and transmitter and Receive interupt and Data Register Empty*/
  UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(0<<RXCIE0)|(0<<UDRIE0);
 2ba:	88 e1       	ldi	r24, 0x18	; 24
 2bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

  /* Set frame format: 8data, 1stop bit no parity */
  UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 2c0:	86 e0       	ldi	r24, 0x06	; 6
 2c2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 2c6:	08 95       	ret

000002c8 <USART_SendByte>:
}

void USART_SendByte(uint8_t u8Data){
	// Wait until last byte has been transmitted
	while((UCSR0A & (1 << UDRE0)) == 0);
 2c8:	e0 ec       	ldi	r30, 0xC0	; 192
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	90 81       	ld	r25, Z
 2ce:	95 ff       	sbrs	r25, 5
 2d0:	fd cf       	rjmp	.-6      	; 0x2cc <USART_SendByte+0x4>

	// Transmit data
	UDR0 = u8Data;
 2d2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2d6:	08 95       	ret

000002d8 <USART_SendStr>:
}

void USART_SendStr(const char *str){
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	ec 01       	movw	r28, r24
	while(*str) {
 2de:	88 81       	ld	r24, Y
 2e0:	88 23       	and	r24, r24
 2e2:	31 f0       	breq	.+12     	; 0x2f0 <USART_SendStr+0x18>
 2e4:	21 96       	adiw	r28, 0x01	; 1
		USART_SendByte(*str);		//Advance though string till end
 2e6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <USART_SendByte>
	// Transmit data
	UDR0 = u8Data;
}

void USART_SendStr(const char *str){
	while(*str) {
 2ea:	89 91       	ld	r24, Y+
 2ec:	81 11       	cpse	r24, r1
 2ee:	fb cf       	rjmp	.-10     	; 0x2e6 <USART_SendStr+0xe>
		USART_SendByte(*str);		//Advance though string till end
		str++;
	}
	return;
}
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>
